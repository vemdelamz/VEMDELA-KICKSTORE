{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.register.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport Logo from '../src/assets/logo/LOGO/PNG/Banner-logo.png';\n\nimport \"../styles/auth.css?__remix_sideEffect__\";\n/**\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({ context }) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({ request, context }) {\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  const { storefront, session } = context;\n  const form = await request.formData();\n  const email = String(form.has('email') ? form.get('email') : '');\n  const password = form.has('password') ? String(form.get('password')) : null;\n  const passwordConfirm = form.has('passwordConfirm') ?\n  String(form.get('passwordConfirm')) :\n  null;\n\n  const validPasswords =\n  password && passwordConfirm && password === passwordConfirm;\n\n  const validInputs = Boolean(email && password);\n  try {\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const { customerCreate } = await storefront.mutate(CUSTOMER_CREATE_MUTATION, {\n      variables: {\n        input: { email, password }\n      }\n    });\n\n    if (customerCreate?.customerUserErrors?.length) {\n      throw new Error(customerCreate?.customerUserErrors[0].message);\n    }\n\n    const newCustomer = customerCreate?.customer;\n    if (!newCustomer?.id) {\n      throw new Error('Could not create customer');\n    }\n\n    // get an access token for the new customer\n    const { customerAccessTokenCreate } = await storefront.mutate(\n      REGISTER_LOGIN_MUTATION,\n      {\n        variables: {\n          input: {\n            email,\n            password\n          }\n        }\n      }\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error('Missing access token');\n    }\n    session.set(\n      'customerAccessToken',\n      customerAccessTokenCreate?.customerAccessToken\n    );\n\n    return json(\n      { error: null, newCustomer },\n      {\n        status: 302,\n        headers: {\n          'Set-Cookie': await session.commit(),\n          Location: '/account'\n        }\n      }\n    );\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({ error: error.message }, { status: 400 });\n    }\n    return json({ error }, { status: 400 });\n  }\n}\n\nexport default function Register() {\n  /** @type {ActionReturnData} */\n  const data = useActionData();\n  const error = data?.error || null;\n  return (\n    <div className=\"login\">\n      <div className='img-header'>\n        <img src={Logo} alt='VEM DE LA' />\n      </div>\n      <Form method=\"POST\">\n        <fieldset>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus />\n\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required />\n\n          <input\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required />\n\n        </fieldset>\n        {error ?\n        <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p> :\n\n        <br />}\n\n        <button className='login-btn' type=\"submit\">Register</button>\n      </Form>\n      <br />\n      <p>\n        <Link to=\"/account/login\" className='login-text'>Login \u2192</Link>\n      </p>\n    </div>);\n\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerCreate\nconst CUSTOMER_CREATE_MUTATION = `#graphql\n  mutation customerCreate(\n    $input: CustomerCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst REGISTER_LOGIN_MUTATION = `#graphql\n  mutation registerLogin(\n    $input: CustomerAccessTokenCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n *   newCustomer:\n *     | NonNullable<CustomerCreateMutation['customerCreate']>['customer']\n *     | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('storefrontapi.generated').CustomerCreateMutation} CustomerCreateMutation */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */"],
  "mappings": "2QA4GQ,IAAAA,EAAA,OAPO,SAARC,GAA4B,CAGjC,IAAMC,EADOC,EAAc,GACP,OAAS,KAC7B,SACE,QAAC,OAAI,UAAU,QACb,oBAAC,OAAI,UAAU,aACb,mBAAC,OAAI,IAAKC,EAAM,IAAI,YAAY,EAClC,KACA,QAACC,EAAA,CAAK,OAAO,OACX,qBAAC,YACC,oBAAC,SACC,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,SAAQ,GACR,YAAY,gBACZ,aAAW,gBAEX,UAAS,GAAC,KAEZ,OAAC,SACC,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,mBACb,YAAY,WACZ,aAAW,WACX,UAAW,EACX,SAAQ,GAAC,KAEX,OAAC,SACC,GAAG,kBACH,KAAK,kBACL,KAAK,WACL,aAAa,mBACb,YAAY,oBACZ,aAAW,oBACX,UAAW,EACX,SAAQ,GAAC,GAEb,EACCH,KACD,OAAC,KACG,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAM,EAChB,EACF,KAEF,OAAC,OAAG,KAEJ,OAAC,UAAO,UAAU,YAAY,KAAK,SAAS,oBAAQ,GACtD,KACA,OAAC,OAAG,KACJ,OAAC,KACC,mBAACI,EAAA,CAAK,GAAG,iBAAiB,UAAU,aAAa,wBAAO,EAC1D,GACF,CAEJ",
  "names": ["import_jsx_runtime", "Register", "error", "useActionData", "Banner_logo_default", "Form", "Link"]
}
