{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.login.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport \"../styles/auth.css?__remix_sideEffect__\";\nimport Logo from '../src/assets/logo/LOGO/PNG/Banner-logo.png';\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{ title: 'Login' }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({ context }) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({ request, context }) {\n  const { session, storefront } = context;\n\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  try {\n    const form = await request.formData();\n    const email = String(form.has('email') ? form.get('email') : '');\n    const password = String(form.has('password') ? form.get('password') : '');\n    const validInputs = Boolean(email && password);\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const { customerAccessTokenCreate } = await storefront.mutate(\n      LOGIN_MUTATION,\n      {\n        variables: {\n          input: { email, password }\n        }\n      }\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error(customerAccessTokenCreate?.customerUserErrors[0].message);\n    }\n\n    const { customerAccessToken } = customerAccessTokenCreate;\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({ error: error.message }, { status: 400 });\n    }\n    return json({ error }, { status: 400 });\n  }\n}\n\nexport default function Login() {\n  /** @type {ActionReturnData} */\n  const data = useActionData();\n  const error = data?.error || null;\n\n  return (\n    <div className=\"login\">\n      <div className='img-header'>\n        <img src={Logo} alt='VEM DE LA' />\n      </div>\n      <div>\n      <Form method=\"POST\">\n        <fieldset>\n          <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              placeholder=\"Email address\"\n              aria-label=\"Email address\"\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus />\n\n          <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              minLength={8}\n              required />\n\n        </fieldset>\n        {error ?\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p> :\n\n          <br />}\n\n        <button className='login-btn' type=\"submit\">Entrar</button>\n      </Form>\n      <br />\n      <div>\n        <p className='create-title'>\n          <Link className='sign-btn' to=\"/account/register\">Ainda n\u00E3o tem uma conta? <span>CRIAR</span></Link>\n        </p>\n        <p>\n          <Link className='recove-btn' to=\"/account/recover\">Forgot password \u2192</Link>\n        </p>\n      \n      </div>\n      </div>\n    </div>);\n\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst LOGIN_MUTATION = `#graphql\n  mutation login($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */"],
  "mappings": "2QA8EQ,IAAAA,EAAA,OAvEKC,EAAO,IACX,CAAC,CAAE,MAAO,OAAQ,CAAC,EA8Db,SAARC,GAAyB,CAG9B,IAAMC,EADOC,EAAc,GACP,OAAS,KAE7B,SACE,QAAC,OAAI,UAAU,QACb,oBAAC,OAAI,UAAU,aACb,mBAAC,OAAI,IAAKC,EAAM,IAAI,YAAY,EAClC,KACA,QAAC,OACD,qBAACC,EAAA,CAAK,OAAO,OACX,qBAAC,YACC,oBAAC,SACG,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,SAAQ,GACR,YAAY,gBACZ,aAAW,gBAEX,UAAS,GAAC,KAEd,OAAC,SACG,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,mBACb,YAAY,WACZ,aAAW,WACX,UAAW,EACX,SAAQ,GAAC,GAEf,EACCH,KACC,OAAC,KACC,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAM,EAChB,EACF,KAEA,OAAC,OAAG,KAEN,OAAC,UAAO,UAAU,YAAY,KAAK,SAAS,kBAAM,GACpD,KACA,OAAC,OAAG,KACJ,QAAC,OACC,oBAAC,KAAE,UAAU,eACX,oBAACI,EAAA,CAAK,UAAU,WAAW,GAAG,oBAAoB,4CAAyB,OAAC,QAAK,iBAAK,GAAO,EAC/F,KACA,OAAC,KACC,mBAACA,EAAA,CAAK,UAAU,aAAa,GAAG,mBAAmB,kCAAiB,EACtE,GAEF,GACA,GACF,CAEJ",
  "names": ["import_jsx_runtime", "meta", "Login", "error", "useActionData", "Banner_logo_default", "Form", "Link"]
}
